
Some notes about installing and configuring the Q-Translate server.
These are mostly so that I can remember the steps later. But maybe
they can help anybody else as well.

* Server details

  | Url          | https://console.developers.google.com/project/qtranslate2 |
  | Tags         | http-server, https-server                                  |
  | Machine type | g1-small (1 vCPU, 1.7 GB memory)                           |
  | Zone         | us-central1-a                                              |


* Setup

  + Update and upgrade packages:
    #+BEGIN_EXAMPLE
    sudo su
    aptitude update
    aptitude upgrade
    #+END_EXAMPLE

  + Install vim:
    #+BEGIN_EXAMPLE
    aptitude install vim
    vim /etc/vim/vimrc
    # uncomment 'syntax on' etc.
    #+END_EXAMPLE

  + Bash prompt and colors:
    #+BEGIN_EXAMPLE
    vim /etc/bash.bashrc
    # set a fancy prompt (non-color, overwrite the one in /etc/profile)
    #PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

    vim ~/.bashrc
    # uncomment lines to have a colorized ls
    #+END_EXAMPLE

  + Install docker:
    #+BEGIN_EXAMPLE
    ### install docker
    curl -sSL https://get.docker.io/ | sh

    ### install the command docker-enter
    docker run -v /usr/local/bin:/target jpetazzo/nsenter
    #+END_EXAMPLE

  + Install =gdrive= for uploading files to Google Drive:
    #+BEGIN_EXAMPLE
    ### download gdrive from: https://github.com/prasmussen/gdrive
    wget -O gdrive https://drive.google.com/uc?id=0B3X9GlR6EmbnTjk4MGNEbEFRRWs
    chmod +x gdrive
    mv gdrive /usr/local/sbin/

    gdrive list
    #+END_EXAMPLE

  + Install =git=:
    #+BEGIN_EXAMPLE
    aptitude install git
    #+END_EXAMPLE


* Container for 'bind9'

  I manage my domains with a *hidden*, *master*, *authoritative-only*
  name-server.

  + Get the code from github:
    #+BEGIN_EXAMPLE
    cd /data/
    git clone  https://github.com/dashohoxha/bind9=
    #+END_EXAMPLE

  + Change any configurations on ~config/var/cache/bind/~,
    ~config/etc/bind/~ and ~ufw.sh~.

  + Build the docker image with =build.sh=.

  + Create a container with =run.sh=.

  + In case that configuration needs to be changed, update it and do
    again: =./rm.sh ; ./build.sh ; ./run.sh=.

  + Backup the configuration of the name server on google drive:
    #+BEGIN_EXAMPLE
    tar cfz bind9.tgz bind9/
    gdrive upload -f bind9.tgz
    #+END_EXAMPLE


* Container 'wsproxy'

  I want to host several domains/subdomains in the same server, in
  different containers. Usually this is a problem because only one of
  the containers can use the ports *80/443* of the host.  The
  container *wsproxy* solves this problem by forwarding HTTPS requests
  to the other containers, according to the domain, behaving like a
  kind of HTTP gateway or hub.

  + Get the code from github:
    #+BEGIN_EXAMPLE
    cd /data/
    git clone  https://github.com/dashohoxha/wsproxy=
    #+END_EXAMPLE

  + Create the container:
    #+BEGIN_EXAMPLE
    wsproxy/build.sh
    wsproxy/run.sh
    #+END_EXAMPLE

  + Customize the configuration of sites. Create a site for the
    subdomains =dev= and =test= of each domain.
    #+BEGIN_EXAMPLE
    cd wsproxy/
    cd config/etc/apache2/sites-available/

    vim qtr.conf
    vim qtr-ssl.conf
    vim bcl.conf
    vim bcl-ssl.conf

    cp qtr.conf qtr_dev.conf
    cp qtr-ssl.conf qtr_dev-ssl.conf
    vim qtr_dev.conf
    vim qtr_dev-ssl.conf

    cp qtr.conf qtr_test.conf
    cp qtr-ssl.conf qtr_test-ssl.conf
    vim qtr_test.conf
    vim qtr_test-ssl.conf

    cp bcl.conf bcl_dev.conf
    cp bcl-ssl.conf bcl_dev-ssl.conf
    vim bcl_dev.conf
    vim bcl_dev-ssl.conf

    cp bcl.conf bcl_test.conf
    cp bcl-ssl.conf bcl_test-ssl.conf
    vim bcl_test.conf
    vim bcl_test-ssl.conf

    cp bcl.conf sq.conf
    cp bcl-ssl.conf sq-ssl.conf
    vim sq.conf
    vim sq-ssl.conf

    cp sq.conf sq_dev.conf
    cp sq-ssl.conf sq_dev-ssl.conf
    vim sq_dev.conf
    vim sq_dev-ssl.conf

    cp sq.conf sq_test.conf
    cp sq-ssl.conf sq_test-ssl.conf
    vim sq_test.conf
    vim sq_test-ssl.conf
    #+END_EXAMPLE

  + Enable each site:
    #+BEGIN_EXAMPLE
    cd ../sites-enabled/
    for site in qtr qtr_dev qtr_test bcl bcl_dev bcl_test sq sq_dev sq_test
    do
	ln -s ../sites-available/$site.conf .
	ln -s ../sites-available/$site-ssl.conf .
    done
    #+END_EXAMPLE

  + Modify hosts and restart:
    #+BEGIN_EXAMPLE
    cd /data/
    vim wsproxy/hosts.txt
    wsproxy/restart.sh
    #+END_EXAMPLE

  + Backup the configuration of wsproxy on google drive:
    #+BEGIN_EXAMPLE
    cd /data/
    tar cfz wsproxy.tgz wsproxy/
    gdrive upload -f wsproxy.tgz
    #+END_EXAMPLE


* Create the other containers

  We need a container for *qtr_server* and one or more containers
  for *qtr_client* (one for each language).

  + Get the docker images of qtr_server and qtr_client:
    #+BEGIN_EXAMPLE
    docker pull qtranslate/qtr_client:v2.2
    docker pull qtranslate/qtr_server:v2.2
    #+END_EXAMPLE

  + Create the containers:
    #+BEGIN_EXAMPLE
    docker run -d --name=qtr --hostname=qtranslate.org \
	       -v /data:/data qtranslate/qtr_server:v2.2

    docker run -d --name=sq --hostname=sq.qtranslate.org \
		qtranslate/qtr_client:v2.2
    #+END_EXAMPLE

  + Customize the configuration of *qtr*:
    #+BEGIN_EXAMPLE
    docker-enter qtr
    cd /usr/local/src/qtr_server/
    vim install/setting.sh
    install/{config.sh,settings.sh}
    #+END_EXAMPLE

  + Customize the configuration of *sq*:
    #+BEGIN_EXAMPLE
    docker-enter sq
    cd /usr/local/src/qtr_client/
    vim install/setting.sh
    install/{config.sh,settings.sh}
    #+END_EXAMPLE

  + Customize the configuration of *wsproxy* and restart it.

  + Make sure that containers start automatically on reboot.  Add this
    line at ~/etc/rc.local~:
    #+BEGIN_EXAMPLE
    docker start bind9 wsproxy qtr sq wsproxy
    #+END_EXAMPLE


* Transfer translation data and users

  #+BEGIN_EXAMPLE
  drush @qtr sql-dump --database=qtr_db --result-file=$(pwd)/data.sql --gzip
  gdrive upload -f data.sql.gz

  gdrive download --pop
  gunzip data.sql.gz
  drush @qtr sql-query --database=qtr_db --file=$(pwd)/data.sql
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  cd /var/www/data/db/
  ./users-export-qtr.sh
  ./users-export-bcl.sh

  cd /var/www/data/db/
  ./users-import.sh @qtr $(pwd)/users-qtr-20141002.sql.gz
  ./users-import.sh @bcl $(pwd)/users-bcl-20141002.sql.gz
  #+END_EXAMPLE


* Attach an extra disk for docker

  + Format the disk with XFS:
    #+BEGIN_EXAMPLE
    apt-get install xfs xfsprogs
    mkfs.xfs /dev/sdb
    #+END_EXAMPLE

  + Stop docker and backup its data:
    #+BEGIN_EXAMPLE
    /etc/init.d/docker stop
    mv /var/lib/docker /docker-backup
    #+END_EXAMPLE

  + Add a line like this to ~/etc/fstab~ for mounting it automatically
    on reboot:
    #+BEGIN_EXAMPLE
    UUID=be840c0d-91f8-41fa-bb40-82e1c4e2e985 /var/lib/docker xfs defaults 1 1
    #+END_EXAMPLE
    The UUID of the disk can be found with: =blkid /dev/sdb=.

  + Copy the backup-ed data to ~/var/lib/docker/~:
    #+BEGIN_EXAMPLE
    mkdir /var/lib/docker
    mount -a
    cp -a /docker-backup/* /var/lib/docker/
    #+END_EXAMPLE

  + Start the docker service and check that everything is ok:
    #+BEGIN_EXAMPLE
    /etc/init.d/docker start
    docker images
    docker ps -a
    #+END_EXAMPLE

  + Cleanup the backup data:
    #+BEGIN_EXAMPLE
    rm -rf /docker-backup/
    #+END_EXAMPLE

  Referencies:
  - http://www.projectatomic.io/docs/docker-storage-recommendation/


* Misc

** Fix the configuration of sites

   Update the function =qtr_get_sites()= on
   ~modules/custom/qtrCore/includes/sites.inc~:
   #+BEGIN_EXAMPLE
   cd /var/www/qtr/profiles/qtr_server/
   vim modules/custom/qtrCore/includes/sites.inc
   #+END_EXAMPLE


** Install fortunes

   #+BEGIN_EXAMPLE
   aptitude install fortunes
   ls /usr/share/games/fortunes/
   vim /var/www/qtr/profiles/qtr_server/utils/fortune.sh
   #+END_EXAMPLE

** Transfer the old site to the new one

*** Content

*** Menu items

*** Private variables

*** Users

*** Google files

*** Transfer with backup/restore
